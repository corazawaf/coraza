// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package loggers

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
	types "github.com/corazawaf/coraza/v3/types"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers(in *jlexer.Lexer, out *auditLogLegacyTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = string(in.String())
		case "transaction_id":
			out.TransactionID = string(in.String())
		case "remote_address":
			out.RemoteAddress = string(in.String())
		case "remote_port":
			out.RemotePort = int(in.Int())
		case "local_address":
			out.LocalAddress = string(in.String())
		case "local_port":
			out.LocalPort = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers(out *jwriter.Writer, in auditLogLegacyTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"transaction_id\":"
		out.RawString(prefix)
		out.String(string(in.TransactionID))
	}
	{
		const prefix string = ",\"remote_address\":"
		out.RawString(prefix)
		out.String(string(in.RemoteAddress))
	}
	{
		const prefix string = ",\"remote_port\":"
		out.RawString(prefix)
		out.Int(int(in.RemotePort))
	}
	{
		const prefix string = ",\"local_address\":"
		out.RawString(prefix)
		out.String(string(in.LocalAddress))
	}
	{
		const prefix string = ",\"local_port\":"
		out.RawString(prefix)
		out.Int(int(in.LocalPort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v auditLogLegacyTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v auditLogLegacyTransaction) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *auditLogLegacyTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *auditLogLegacyTransaction) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers1(in *jlexer.Lexer, out *auditLogLegacyStopwatch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Combined":
			out.Combined = int64(in.Int64())
		case "P1":
			out.P1 = int64(in.Int64())
		case "P2":
			out.P2 = int64(in.Int64())
		case "P3":
			out.P3 = int64(in.Int64())
		case "P4":
			out.P4 = int64(in.Int64())
		case "P5":
			out.P5 = int64(in.Int64())
		case "Sr":
			out.Sr = int64(in.Int64())
		case "Sw":
			out.Sw = int64(in.Int64())
		case "L":
			out.L = int64(in.Int64())
		case "Gc":
			out.Gc = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers1(out *jwriter.Writer, in auditLogLegacyStopwatch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Combined\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Combined))
	}
	{
		const prefix string = ",\"P1\":"
		out.RawString(prefix)
		out.Int64(int64(in.P1))
	}
	{
		const prefix string = ",\"P2\":"
		out.RawString(prefix)
		out.Int64(int64(in.P2))
	}
	{
		const prefix string = ",\"P3\":"
		out.RawString(prefix)
		out.Int64(int64(in.P3))
	}
	{
		const prefix string = ",\"P4\":"
		out.RawString(prefix)
		out.Int64(int64(in.P4))
	}
	{
		const prefix string = ",\"P5\":"
		out.RawString(prefix)
		out.Int64(int64(in.P5))
	}
	{
		const prefix string = ",\"Sr\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sr))
	}
	{
		const prefix string = ",\"Sw\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sw))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.Int64(int64(in.L))
	}
	{
		const prefix string = ",\"Gc\":"
		out.RawString(prefix)
		out.Int64(int64(in.Gc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v auditLogLegacyStopwatch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v auditLogLegacyStopwatch) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *auditLogLegacyStopwatch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers1(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *auditLogLegacyStopwatch) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers1(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers2(in *jlexer.Lexer, out *auditLogLegacyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "protocol":
			out.Protocol = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Headers)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers2(out *jwriter.Writer, in auditLogLegacyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Headers {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.String(string(v2Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v auditLogLegacyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v auditLogLegacyResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *auditLogLegacyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers2(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *auditLogLegacyResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers2(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers3(in *jlexer.Lexer, out *auditLogLegacyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request_line":
			out.RequestLine = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.Headers)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers3(out *jwriter.Writer, in auditLogLegacyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request_line\":"
		out.RawString(prefix[1:])
		out.String(string(in.RequestLine))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Headers {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v auditLogLegacyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v auditLogLegacyRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *auditLogLegacyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers3(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *auditLogLegacyRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers3(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers4(in *jlexer.Lexer, out *auditLogLegacyData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]string, 0, 4)
					} else {
						out.Messages = []string{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Messages = append(out.Messages, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "error_messages":
			if in.IsNull() {
				in.Skip()
				out.ErrorMessages = nil
			} else {
				in.Delim('[')
				if out.ErrorMessages == nil {
					if !in.IsDelim(']') {
						out.ErrorMessages = make([]string, 0, 4)
					} else {
						out.ErrorMessages = []string{}
					}
				} else {
					out.ErrorMessages = (out.ErrorMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.ErrorMessages = append(out.ErrorMessages, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "handler":
			out.Handler = string(in.String())
		case "stopwatch":
			(out.Stopwatch).UnmarshalTinyJSON(in)
		case "response_body_dechunked":
			out.ResponseBodyDechunked = bool(in.Bool())
		case "producer":
			if in.IsNull() {
				in.Skip()
				out.Producer = nil
			} else {
				in.Delim('[')
				if out.Producer == nil {
					if !in.IsDelim(']') {
						out.Producer = make([]string, 0, 4)
					} else {
						out.Producer = []string{}
					}
				} else {
					out.Producer = (out.Producer)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Producer = append(out.Producer, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "server":
			out.Server = string(in.String())
		case "engine_mode":
			out.EngineMode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers4(out *jwriter.Writer, in auditLogLegacyData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Messages {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"error_messages\":"
		out.RawString(prefix)
		if in.ErrorMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.ErrorMessages {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"handler\":"
		out.RawString(prefix)
		out.String(string(in.Handler))
	}
	{
		const prefix string = ",\"stopwatch\":"
		out.RawString(prefix)
		(in.Stopwatch).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"response_body_dechunked\":"
		out.RawString(prefix)
		out.Bool(bool(in.ResponseBodyDechunked))
	}
	{
		const prefix string = ",\"producer\":"
		out.RawString(prefix)
		if in.Producer == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Producer {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix)
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"engine_mode\":"
		out.RawString(prefix)
		out.String(string(in.EngineMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v auditLogLegacyData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v auditLogLegacyData) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *auditLogLegacyData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers4(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *auditLogLegacyData) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers4(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers5(in *jlexer.Lexer, out *auditLogLegacy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transaction":
			(out.Transaction).UnmarshalTinyJSON(in)
		case "request":
			(out.Request).UnmarshalTinyJSON(in)
		case "response":
			(out.Response).UnmarshalTinyJSON(in)
		case "audit_data":
			(out.AuditData).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers5(out *jwriter.Writer, in auditLogLegacy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transaction\":"
		out.RawString(prefix[1:])
		(in.Transaction).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		(in.Request).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"response\":"
		out.RawString(prefix)
		(in.Response).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"audit_data\":"
		out.RawString(prefix)
		(in.AuditData).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v auditLogLegacy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v auditLogLegacy) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *auditLogLegacy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers5(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *auditLogLegacy) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers5(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers6(in *jlexer.Lexer, out *AuditTransactionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "protocol":
			out.Protocol = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 []string
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						in.Delim('[')
						if v14 == nil {
							if !in.IsDelim(']') {
								v14 = make([]string, 0, 4)
							} else {
								v14 = []string{}
							}
						} else {
							v14 = (v14)[:0]
						}
						for !in.IsDelim(']') {
							var v15 string
							v15 = string(in.String())
							v14 = append(v14, v15)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Headers)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers6(out *jwriter.Writer, in AuditTransactionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Headers {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				if v16Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v17, v18 := range v16Value {
						if v17 > 0 {
							out.RawByte(',')
						}
						out.String(string(v18))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditTransactionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AuditTransactionResponse) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditTransactionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers6(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AuditTransactionResponse) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers6(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers7(in *jlexer.Lexer, out *AuditTransactionRequestFiles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "mime":
			out.Mime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers7(out *jwriter.Writer, in AuditTransactionRequestFiles) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"mime\":"
		out.RawString(prefix)
		out.String(string(in.Mime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditTransactionRequestFiles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AuditTransactionRequestFiles) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditTransactionRequestFiles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers7(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AuditTransactionRequestFiles) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers7(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers8(in *jlexer.Lexer, out *AuditTransactionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "uri":
			out.URI = string(in.String())
		case "http_version":
			out.HTTPVersion = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 []string
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						in.Delim('[')
						if v19 == nil {
							if !in.IsDelim(']') {
								v19 = make([]string, 0, 4)
							} else {
								v19 = []string{}
							}
						} else {
							v19 = (v19)[:0]
						}
						for !in.IsDelim(']') {
							var v20 string
							v20 = string(in.String())
							v19 = append(v19, v20)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Headers)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			out.Body = string(in.String())
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]AuditTransactionRequestFiles, 0, 1)
					} else {
						out.Files = []AuditTransactionRequestFiles{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v21 AuditTransactionRequestFiles
					(v21).UnmarshalTinyJSON(in)
					out.Files = append(out.Files, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers8(out *jwriter.Writer, in AuditTransactionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"uri\":"
		out.RawString(prefix)
		out.String(string(in.URI))
	}
	{
		const prefix string = ",\"http_version\":"
		out.RawString(prefix)
		out.String(string(in.HTTPVersion))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Headers {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				if v22Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v23, v24 := range v22Value {
						if v23 > 0 {
							out.RawByte(',')
						}
						out.String(string(v24))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		if in.Files == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Files {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditTransactionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AuditTransactionRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditTransactionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers8(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AuditTransactionRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers8(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers9(in *jlexer.Lexer, out *AuditTransactionProducer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "connector":
			out.Connector = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "server":
			out.Server = string(in.String())
		case "rule_engine":
			out.RuleEngine = string(in.String())
		case "stopwatch":
			out.Stopwatch = string(in.String())
		case "rulesets":
			if in.IsNull() {
				in.Skip()
				out.Rulesets = nil
			} else {
				in.Delim('[')
				if out.Rulesets == nil {
					if !in.IsDelim(']') {
						out.Rulesets = make([]string, 0, 4)
					} else {
						out.Rulesets = []string{}
					}
				} else {
					out.Rulesets = (out.Rulesets)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.Rulesets = append(out.Rulesets, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers9(out *jwriter.Writer, in AuditTransactionProducer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"connector\":"
		out.RawString(prefix[1:])
		out.String(string(in.Connector))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix)
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"rule_engine\":"
		out.RawString(prefix)
		out.String(string(in.RuleEngine))
	}
	{
		const prefix string = ",\"stopwatch\":"
		out.RawString(prefix)
		out.String(string(in.Stopwatch))
	}
	{
		const prefix string = ",\"rulesets\":"
		out.RawString(prefix)
		if in.Rulesets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Rulesets {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditTransactionProducer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AuditTransactionProducer) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditTransactionProducer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers9(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AuditTransactionProducer) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers9(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers10(in *jlexer.Lexer, out *AuditTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = string(in.String())
		case "unix_timestamp":
			out.UnixTimestamp = int64(in.Int64())
		case "id":
			out.ID = string(in.String())
		case "client_ip":
			out.ClientIP = string(in.String())
		case "client_port":
			out.ClientPort = int(in.Int())
		case "host_ip":
			out.HostIP = string(in.String())
		case "host_port":
			out.HostPort = int(in.Int())
		case "server_id":
			out.ServerID = string(in.String())
		case "request":
			(out.Request).UnmarshalTinyJSON(in)
		case "response":
			(out.Response).UnmarshalTinyJSON(in)
		case "producer":
			(out.Producer).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers10(out *jwriter.Writer, in AuditTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"unix_timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.UnixTimestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"client_ip\":"
		out.RawString(prefix)
		out.String(string(in.ClientIP))
	}
	{
		const prefix string = ",\"client_port\":"
		out.RawString(prefix)
		out.Int(int(in.ClientPort))
	}
	{
		const prefix string = ",\"host_ip\":"
		out.RawString(prefix)
		out.String(string(in.HostIP))
	}
	{
		const prefix string = ",\"host_port\":"
		out.RawString(prefix)
		out.Int(int(in.HostPort))
	}
	{
		const prefix string = ",\"server_id\":"
		out.RawString(prefix)
		out.String(string(in.ServerID))
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		(in.Request).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"response\":"
		out.RawString(prefix)
		(in.Response).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"producer\":"
		out.RawString(prefix)
		(in.Producer).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AuditTransaction) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers10(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AuditTransaction) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers10(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers11(in *jlexer.Lexer, out *AuditMessageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file":
			out.File = string(in.String())
		case "line":
			out.Line = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "rev":
			out.Rev = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "severity":
			out.Severity = types.RuleSeverity(in.Int())
		case "ver":
			out.Ver = string(in.String())
		case "maturity":
			out.Maturity = int(in.Int())
		case "accuracy":
			out.Accuracy = int(in.Int())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.Tags = append(out.Tags, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "raw":
			out.Raw = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers11(out *jwriter.Writer, in AuditMessageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file\":"
		out.RawString(prefix[1:])
		out.String(string(in.File))
	}
	{
		const prefix string = ",\"line\":"
		out.RawString(prefix)
		out.Int(int(in.Line))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"rev\":"
		out.RawString(prefix)
		out.String(string(in.Rev))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.Int(int(in.Severity))
	}
	{
		const prefix string = ",\"ver\":"
		out.RawString(prefix)
		out.String(string(in.Ver))
	}
	{
		const prefix string = ",\"maturity\":"
		out.RawString(prefix)
		out.Int(int(in.Maturity))
	}
	{
		const prefix string = ",\"accuracy\":"
		out.RawString(prefix)
		out.Int(int(in.Accuracy))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.Tags {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"raw\":"
		out.RawString(prefix)
		out.String(string(in.Raw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditMessageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AuditMessageData) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditMessageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers11(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AuditMessageData) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers11(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers12(in *jlexer.Lexer, out *AuditMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actionset":
			out.Actionset = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "data":
			(out.Data).UnmarshalTinyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers12(out *jwriter.Writer, in AuditMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actionset\":"
		out.RawString(prefix[1:])
		out.String(string(in.Actionset))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalTinyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AuditMessage) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers12(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AuditMessage) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers12(l, v)
}
func tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers13(in *jlexer.Lexer, out *AuditLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transaction":
			(out.Transaction).UnmarshalTinyJSON(in)
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]AuditMessage, 0, 0)
					} else {
						out.Messages = []AuditMessage{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v33 AuditMessage
					(v33).UnmarshalTinyJSON(in)
					out.Messages = append(out.Messages, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers13(out *jwriter.Writer, in AuditLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transaction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Transaction).MarshalTinyJSON(out)
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Messages {
				if v34 > 0 {
					out.RawByte(',')
				}
				(v35).MarshalTinyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AuditLog) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA9bdaef5EncodeGithubComCorazawafCorazaV3Loggers13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers13(&r, v)
	return r.Error()
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AuditLog) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA9bdaef5DecodeGithubComCorazawafCorazaV3Loggers13(l, v)
}
