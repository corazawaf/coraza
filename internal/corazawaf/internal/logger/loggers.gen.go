// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by internal/corazawaf/loggers/generator DO NOT EDIT.

package logger

import (
	"fmt"
	"io"
	"log"
)

type DelegateLogger interface {
	Error(message string, args ...interface{})
	Warn(message string, args ...interface{})
	Info(message string, args ...interface{})
	Debug(message string, args ...interface{})
	Trace(message string, args ...interface{})
	SetOutput(w io.WriteCloser)
}

func CreateLogger(level int, l *log.Logger) DelegateLogger {
	switch level {
	case 1:
		return &ErrorLogger{l}
	case 2:
		return &WarnLogger{l}
	case 3:
		return &InfoLogger{l}
	case 4, 5, 6, 7, 8:
		return &DebugLogger{l}
	case 9:
		return &TraceLogger{l}
	default:
		panic(fmt.Sprintf("invalid log level %d", level))
	}
}

type ErrorLogger struct {
	*log.Logger
}

var _ DelegateLogger = (*ErrorLogger)(nil)

func (e *ErrorLogger) Error(message string, args ...interface{}) {
	if len(args) > 0 {
		e.Logger.Print("[ERROR] ")
		e.Logger.Printf(message, args...)
	} else {
		e.Logger.Print("[ERROR] ", message)
	}
}

func (*ErrorLogger) Warn(_ string, _ ...interface{}) {}

func (*ErrorLogger) Info(_ string, _ ...interface{}) {}

func (*ErrorLogger) Debug(_ string, _ ...interface{}) {}

func (*ErrorLogger) Trace(_ string, _ ...interface{}) {}

func (e *ErrorLogger) SetOutput(o io.WriteCloser) {
	e.Logger.SetOutput(o)
}

type WarnLogger struct {
	*log.Logger
}

var _ DelegateLogger = (*WarnLogger)(nil)

func (w *WarnLogger) Error(message string, args ...interface{}) {
	if len(args) > 0 {
		w.Logger.Print("[ERROR] ")
		w.Logger.Printf(message, args...)
	} else {
		w.Logger.Print("[ERROR] ", message)
	}
}

func (w *WarnLogger) Warn(message string, args ...interface{}) {
	if len(args) > 0 {
		w.Logger.Print("[WARN] ")
		w.Logger.Printf(message, args...)
	} else {
		w.Logger.Print("[WARN] ", message)
	}
}

func (*WarnLogger) Info(_ string, _ ...interface{}) {}

func (*WarnLogger) Debug(_ string, _ ...interface{}) {}

func (*WarnLogger) Trace(_ string, _ ...interface{}) {}

func (w *WarnLogger) SetOutput(o io.WriteCloser) {
	w.Logger.SetOutput(o)
}

type InfoLogger struct {
	*log.Logger
}

var _ DelegateLogger = (*InfoLogger)(nil)

func (i *InfoLogger) Error(message string, args ...interface{}) {
	if len(args) > 0 {
		i.Logger.Print("[ERROR] ")
		i.Logger.Printf(message, args...)
	} else {
		i.Logger.Print("[ERROR] ", message)
	}
}

func (i *InfoLogger) Warn(message string, args ...interface{}) {
	if len(args) > 0 {
		i.Logger.Print("[WARN] ")
		i.Logger.Printf(message, args...)
	} else {
		i.Logger.Print("[WARN] ", message)
	}
}

func (i *InfoLogger) Info(message string, args ...interface{}) {
	if len(args) > 0 {
		i.Logger.Print("[INFO] ")
		i.Logger.Printf(message, args...)
	} else {
		i.Logger.Print("[INFO] ", message)
	}
}

func (*InfoLogger) Debug(_ string, _ ...interface{}) {}

func (*InfoLogger) Trace(_ string, _ ...interface{}) {}

func (i *InfoLogger) SetOutput(o io.WriteCloser) {
	i.Logger.SetOutput(o)
}

type DebugLogger struct {
	*log.Logger
}

var _ DelegateLogger = (*DebugLogger)(nil)

func (d *DebugLogger) Error(message string, args ...interface{}) {
	if len(args) > 0 {
		d.Logger.Print("[ERROR] ")
		d.Logger.Printf(message, args...)
	} else {
		d.Logger.Print("[ERROR] ", message)
	}
}

func (d *DebugLogger) Warn(message string, args ...interface{}) {
	if len(args) > 0 {
		d.Logger.Print("[WARN] ")
		d.Logger.Printf(message, args...)
	} else {
		d.Logger.Print("[WARN] ", message)
	}
}

func (d *DebugLogger) Info(message string, args ...interface{}) {
	if len(args) > 0 {
		d.Logger.Print("[INFO] ")
		d.Logger.Printf(message, args...)
	} else {
		d.Logger.Print("[INFO] ", message)
	}
}

func (d *DebugLogger) Debug(message string, args ...interface{}) {
	if len(args) > 0 {
		d.Logger.Print("[DEBUG] ")
		d.Logger.Printf(message, args...)
	} else {
		d.Logger.Print("[DEBUG] ", message)
	}
}

func (*DebugLogger) Trace(_ string, _ ...interface{}) {}

func (d *DebugLogger) SetOutput(o io.WriteCloser) {
	d.Logger.SetOutput(o)
}

type TraceLogger struct {
	*log.Logger
}

var _ DelegateLogger = (*TraceLogger)(nil)

func (t *TraceLogger) Error(message string, args ...interface{}) {
	if len(args) > 0 {
		t.Logger.Print("[ERROR] ")
		t.Logger.Printf(message, args...)
	} else {
		t.Logger.Print("[ERROR] ", message)
	}
}

func (t *TraceLogger) Warn(message string, args ...interface{}) {
	if len(args) > 0 {
		t.Logger.Print("[WARN] ")
		t.Logger.Printf(message, args...)
	} else {
		t.Logger.Print("[WARN] ", message)
	}
}

func (t *TraceLogger) Info(message string, args ...interface{}) {
	if len(args) > 0 {
		t.Logger.Print("[INFO] ")
		t.Logger.Printf(message, args...)
	} else {
		t.Logger.Print("[INFO] ", message)
	}
}

func (t *TraceLogger) Debug(message string, args ...interface{}) {
	if len(args) > 0 {
		t.Logger.Print("[DEBUG] ")
		t.Logger.Printf(message, args...)
	} else {
		t.Logger.Print("[DEBUG] ", message)
	}
}

func (t *TraceLogger) Trace(message string, args ...interface{}) {
	if len(args) > 0 {
		t.Logger.Print("[TRACE] ")
		t.Logger.Printf(message, args...)
	} else {
		t.Logger.Print("[TRACE] ", message)
	}
}

func (t *TraceLogger) SetOutput(o io.WriteCloser) {
	t.Logger.SetOutput(o)
}
