// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by internal/corazawaf/loggers/generator DO NOT EDIT.

package logger

import (
    "fmt"
    "io"
    "log"
)

type DelegateLogger interface {
	Error(message string, args ...interface{})
	Warn(message string, args ...interface{})
	Info(message string, args ...interface{})
	Debug(message string, args ...interface{})
	Trace(message string, args ...interface{})
    SetOutput(w io.WriteCloser)
}

func CreateLogger(level int, l *log.Logger) DelegateLogger {
    switch level {
    case 1:
        return &ErrorLogger{l}
    case 2:
        return &WarnLogger{l}
    case 3:
        return &InfoLogger{l}
    case 4, 5, 6, 7, 8:
        return &DebugLogger{l}
    case 9:
        return &TraceLogger{l}
    default:
        panic(fmt.Sprintf("invalid log level %d", level))
    }
}

{{ range . }}
type {{ .Name }}Logger struct {
    *log.Logger
}

var _ DelegateLogger = (*{{ .Name }}Logger)(nil)

{{if (ge .LogLevel 1)}}func ({{ .Name | FirstLetter }} *{{ .Name }}Logger) Error(message string, args ...interface{}) {
    if len(args) > 0 {
        {{ .Name | FirstLetter }}.Logger.Print("[ERROR] ")
        {{ .Name | FirstLetter }}.Logger.Printf(message, args...)
    } else {
        {{ .Name | FirstLetter }}.Logger.Print("[ERROR] ", message)
    }
}
{{else}}func (*{{ .Name }}Logger) Error(_ string, _ ...interface{}) {}
{{end}}

{{if (ge .LogLevel 2)}}func ({{ .Name | FirstLetter }} *{{ .Name }}Logger) Warn(message string, args ...interface{}) {
    if len(args) > 0 {
        {{ .Name | FirstLetter }}.Logger.Print("[WARN] ")
        {{ .Name | FirstLetter }}.Logger.Printf(message, args...)
    } else {
        {{ .Name | FirstLetter }}.Logger.Print("[WARN] ", message)
    }
}
{{else}}func (*{{ .Name }}Logger) Warn(_ string, _ ...interface{}) {}
{{end}}

{{if (ge .LogLevel 3)}}func ({{ .Name | FirstLetter }} *{{ .Name }}Logger) Info(message string, args ...interface{}) {
    if len(args) > 0 {
        {{ .Name | FirstLetter }}.Logger.Print("[INFO] ")
        {{ .Name | FirstLetter }}.Logger.Printf(message, args...)
    } else {
        {{ .Name | FirstLetter }}.Logger.Print("[INFO] ", message)
    }
}
{{else}}func (*{{ .Name }}Logger) Info(_ string, _ ...interface{}) {}
{{end}}

{{if (ge .LogLevel 4)}}func ({{ .Name | FirstLetter }} *{{ .Name }}Logger) Debug(message string, args ...interface{}) {
    if len(args) > 0 {
        {{ .Name | FirstLetter }}.Logger.Print("[DEBUG] ")
        {{ .Name | FirstLetter }}.Logger.Printf(message, args...)
    } else {
        {{ .Name | FirstLetter }}.Logger.Print("[DEBUG] ", message)
    }
}
{{else}}func (*{{ .Name }}Logger) Debug(_ string, _ ...interface{}) {}
{{end}}
{{if (ge .LogLevel 5)}}func ({{ .Name | FirstLetter }} *{{ .Name }}Logger) Trace(message string, args ...interface{}) {
    if len(args) > 0 {
        {{ .Name | FirstLetter }}.Logger.Print("[TRACE] ")
        {{ .Name | FirstLetter }}.Logger.Printf(message, args...)
    } else {
        {{ .Name | FirstLetter }}.Logger.Print("[TRACE] ", message)
    }
}
{{else}}func (*{{ .Name }}Logger) Trace(_ string, _ ...interface{}) {}
{{end}}

func ({{ .Name | FirstLetter }} *{{ .Name }}Logger) SetOutput(o io.WriteCloser) {
    {{ .Name | FirstLetter }}.Logger.SetOutput(o)
}
{{ end }}
